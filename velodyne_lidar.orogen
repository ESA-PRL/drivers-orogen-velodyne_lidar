#!/usr/bin/env ruby
name "velodyne_lidar"
# version "0.1"

using_library "velodyne_lidar"
using_library "aggregator"
import_types_from "aggregator"
import_types_from "base"
import_types_from "velodyne_lidar/MultilevelLaserScan.h"
import_types_from "velodyne_lidar/gps_rmc_type.h"

task_context "LaserScanner" do
   needs_configuration
   fd_driven

   property('timeout', 'int', 50).
        doc 'the read timeout in milliseconds'

   property('min_range', 'double', 1.0).
        doc 'Smaller scan ranges in meter are ignored'

   property('max_range', 'double', 70.0).
        doc 'Larger scan ranges in meter are ignored'

   output_port("laser_scans", "velodyne_lidar::MultilevelLaserScan").
        doc 'laserscans of the upper head'
   
   output_port("laser_scans_lower_head", "velodyne_lidar::MultilevelLaserScan").
        doc 'laserscans of the lower head. Note: this output is only available on the Velodyne HDL-64E'

   output_port("ir_frame", ro_ptr("/base/samples/frame/Frame")).
    doc("video raw ir image retrieved from LiDAR")

   output_port("ir_interp_frame", ro_ptr("/base/samples/frame/Frame")).
    doc("video interpolated ir image retrieved from LiDAR")

   output_port("range_frame", ro_ptr("/base/samples/frame/Frame")).
    doc("video raw range image retrieved from LiDAR")

   output_port("range_interp_frame", ro_ptr("/base/samples/frame/Frame")).
    doc("video interpolated range image retrieved from LiDAR")

   output_port("azimuth_frame", ro_ptr("/base/samples/frame/Frame")).
    doc("video azimuth image retrieved from LiDAR")

   output_port("velodyne_time", 'uint32_t')
   output_port("accumulated_velodyne_time", '/base/Time')
   output_port("estimated_clock_offset", 'int64_t')
   
   error_states :IO_ERROR, :IO_TIMEOUT
end

task_context "Positioning" do
    needs_configuration
    fd_driven
    
    property("utm_zone", "int", 32).
        doc "UTM zone for conversion of WGS84 to UTM"
    property("utm_north", "bool", true).
        doc "UTM north for conversion of WGS84 to UTM"
    property("origin", "/base/Position").
        doc "Origin in UTM coordinates, that is used for position readings." 
    property('timeout', 'int', 50).
        doc 'the read timeout in milliseconds'
    
    output_port('gps_raw_data', '/velodyne_lidar/GPS_RMC').
            doc "the GPS raw data as reported by the hardware"

    output_port('position_samples', '/base/samples/RigidBodyState').
            doc "computed position in m, in the UTM coordinate provided and local to the origin"
            
    output_port('orientation_sensors_1', '/base/samples/IMUSensors').
        doc 'provides the first raw set of orientation readings. 1-axis gryrometer and 2-axis accelerometer'
    output_port('orientation_sensors_2', '/base/samples/IMUSensors').
        doc 'provides the second raw set of orientation readings. 1-axis gryrometer and 2-axis accelerometer'
    output_port('orientation_sensors_3', '/base/samples/IMUSensors').
        doc 'provides the third raw set of orientation readings. 1-axis gryrometer and 2-axis accelerometer'

    error_states :IO_ERROR, :IO_TIMEOUT
end
